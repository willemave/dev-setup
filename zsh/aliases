# Skip forward/back a word with opt-arrow
bindkey -e

bindkey '[C' forward-word
bindkey '[D' backward-word

# Skip to start/end of line with cmd-arrow
bindkey '[E' beginning-of-line
bindkey '[F' end-of-line

# Delete word with opt-backspace/opt-delete
bindkey '[G' backward-kill-word
bindkey '[H' kill-word

# Delete line with cmd-backspace
bindkey '[I' kill-whole-line

# Aliases
alias gfa='git fetch --all'
compdef gfa=git
alias g='git'
compdef g=git
alias gst='git status -uno'
compdef _git gst=git-status
alias gd='git diff'
compdef _git gd=git-diff
alias gdc='git diff --cached'
compdef _git gdc=git-diff
alias gl='git pull'
compdef _git gl=git-pull
alias gup='git pull --rebase'
compdef _git gup=git-fetch
alias gp='git push'
compdef _git gp=git-push
alias gpf='git push --force'
compdef _git gp=git-push
alias gd='git diff'
gdv() { git diff -w "$@" | view - }
compdef _git gdv=git-diff
alias gc='git commit -v'
compdef _git gc=git-commit
alias gc!='git commit -v --amend'
compdef _git gc!=git-commit
alias gca='git commit -v -a'
compdef _git gc=git-commit
alias gca!='git commit -v -a --amend'
compdef _git gca!=git-commit
alias gcmsg='git commit -m'
compdef _git gcmsg=git-commit
alias gco='git checkout'
compdef _git gco=git-checkout
alias gcm='git checkout master'
alias gr='git remote'
compdef _git gr=git-remote
alias grv='git remote -v'
compdef _git grv=git-remote
alias grmv='git remote rename'
compdef _git grmv=git-remote
alias grrm='git remote remove'
compdef _git grrm=git-remote
alias grset='git remote set-url'
compdef _git grset=git-remote
alias grup='git remote update'
compdef _git grset=git-remote
alias grbi='git rebase -i'
compdef _git grbi=git-rebase
alias grbc='git add --all . ; git rebase --continue'
compdef _git grbc=git-rebase
alias grba='git rebase --abort'
compdef _git grba=git-rebase
alias gb='git branch'
compdef _git gb=git-branch
alias gba='git branch -a'
compdef _git gba=git-branch
alias gcount='git shortlog -sn'
compdef gcount=git
alias gcl='git config --list'
alias gcp='git cherry-pick'
compdef _git gcp=git-cherry-pick
alias glb='git lgb'
compdef _git glg=git-log
alias glo='git lg'
compdef _git glo=git-log
alias gss='git status -s'
compdef _git gss=git-status
alias ga='git add'
compdef _git ga=git-add
alias gm='git merge'
compdef _git gm=git-merge
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'
alias gclean='git reset --hard && git clean -df'
alias gwc='git whatchanged -p --abbrev-commit --pretty=medium'
alias gfup='git fetch --all ; git rebase origin/master'

alias gpoat='git push origin --all && git push origin --tags'
alias gmt='git mergetool --no-prompt'
compdef _git gm=git-mergetool

alias gg='git gui citool'
alias gga='git gui citool --amend'
alias gk='gitk --all --branches'

alias gsts='git stash show --text'
alias gs='git stash'
alias gsp='git stash pop'
alias gstd='git stash drop'
alias gls='git pull; git submodule update --recursive'
alias gap='git add -p'

# Will cd into the top of the current repository
# or submodule.
grt() {
  cd $(git rev-parse --show-toplevel || echo ".")
}

# these alias commit and uncomit wip branches
alias gwip='git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m "--wip--"'
alias gunwip='git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1'
glast () {
	git for-each-ref --sort=-committerdate refs/heads/  | awk -F 'refs/heads/' '{ print $2; }'
}


alias rvapp='rvm-exec "/Users/willem/Development/appointments" "bundle" "exec" "rackup" "-o" "127.0.0.1" "-p" "50010"'
alias f.g='find . | grep '
alias bees='bundle exec spring'
alias beers='bundle exec spring rake'
alias sspec='bundle exec spring rspec spec'
branches ()
{
	git for-each-ref --format='%(refname)' --sort=-committerdate refs/heads/ | sed -e "s/refs\/heads\///"
}
glist () {
	for ref in $(git for-each-ref --count=50 --sort=-committerdate --format="%(refname)" refs/heads/ refs/remotes ); do git log -n1 $ref --pretty=format:"%Cgreen%cr%Creset %C(yellow)%d%Creset %C(bold blue)<%an>%Creset%n" | cat ; done | awk '! a[$0]++'
}
alias dbtest='beer db:structure:load db:seed RAILS_ENV=test ; supervisorctl restart mysql'
alias dbclean='beer db:drop db:create db:migrate db:seed RAILS_ENV=development ; script/random_data -u merchant -s 2 -e 5 -c 10 -r 10; dbtest; supervisorctl restart mysql'
alias dbm='beer db:migrate RAILS_ENV=development; beer db:migrate RAILS_ENV=test'
alias zc='zeus console'
alias zr='zeus rake'
co ()
{
    git checkout $(branches | selecta)
}
deploy-staging() {
	ssh -t hoist.sjc1.square "until hoist deploy appointments staging $* --autoconfirm; do sleep 60; done"
}
deploy-production() {
	ssh -t hoist.sjc1b.square "until hoist deploy appointments production $*; do sleep 60; done"
}
logs() {
	presidio query --from -1d application:appointments $*
}
gcom() {
	gco $*; dbm;
}
untilfail() {
	while $* ; do : ; done
}
proj() {
    cd $(find ~/Development ~/Development/java ~/Development/inventory -maxdepth 1 -type d | selecta)
}
alias structuregen='beer db:drop db:create db:migrate RAILS_ENV=test'
alias structureconflict='git reset db/structure.sql ; structuregen;  git add --all .'
okc() {
	zeus test spec --exclude-pattern 'spec/features/**/*_spec.rb' --format documentation --color ; script/hooks/rubocop-example.sh
}

# By default, ^S freezes terminal output and ^Q resumes it. Disable that so
# that those keys can be used for other things.
unsetopt flowcontrol
deployable() {
	git push origin $(git rev-parse --abbrev-ref HEAD):deployable --force
}
alias gundo=git reset --soft HEAD@{1}
alias vsql='psql "postgresql://vertica.corp-dc.global.square:5433/warehouse?sslmode=verify-full"'
export NVM_DIR=~/.nvm
alias fixdashboard='bundle && npm i && sq @dashboard build'
nvm () {
    . "$(brew --prefix nvm)/nvm.sh" --no-use
    nvm use default
    nvm $@
}
pj() {
	python -m json.tool
}
function rgp {
	rg -p $* | less -R
}

alias java8='export JAVA_HOME="`/usr/libexec/java_home -v 1.8`" && echo $JAVA_HOME'


# autocompletion for ruby_test
# works with tu/tf aliases
_ruby_tests() {
  if [[ -n $words[2] ]]; then
    compadd `ruby_test -l ${words[2]}`
  fi
}
compdef _ruby_tests ruby_test

_git_remote_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null)
  if [[ -n $ref ]]; then
    if (( CURRENT == 2 )); then
      # first arg: operation
      compadd create publish rename delete track
    elif (( CURRENT == 3 )); then
      # second arg: remote branch name
      compadd `git branch -r | grep -v HEAD | sed "s/.*\///" | sed "s/ //g"`
    elif (( CURRENT == 4 )); then
      # third arg: remote name
      compadd `git remote`
    fi
  else;
    _files
  fi
}
compdef _git_remote_branch grb

# If ".rvm" doesn't appear in $PATH load RVM
if [[ $PATH != *".rvm"* ]]; then
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
fi


